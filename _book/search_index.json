[["index.html", "Creating the frombookdown R package 1 Introduction", " Creating the frombookdown R package Jacob Bien 2022-10-26 1 Introduction This is an unusual bookdown. Unlike most books, whose sole purpose is to explain something to the reader, the purpose of this book is two-fold: To explain the inner workings of the frombookdown R package. To be the actual codebase for that package. This idea of writing a human-oriented document that is your codebase (rather than living separately from it) is called literate programming and was introduced by Donald Knuth in the 1980s. Many R users use literate programming all the time for data analyses and ‚Äúdynamic reports‚Äù thanks to Yihui Xie and the knitr and rmarkdown packages. The unusual thing here is that we‚Äôre using literate programming for writing an R package. To do this, we are using the litr R package, which lets you define R packages in an R Markdown file. To generate this bookdown site, we ran the following in an R console:1 bookdown::render_book(&quot;index.Rmd&quot;, output_format = litr::litr_gitbook()) The purpose of the frombookdown package is simply to demonstrate the basic functionality of writing an R package as a bookdown. Its main functionality will have to do with linear regression since this will allow us to write some equations, make some relevant plots, etc. For a ‚Äúnormal‚Äù bookdown, we would use the same command but with a non-litr output_format such as bookdown::gitbook().‚Ü©Ô∏é "],["package-setup.html", "2 Package setup", " 2 Package setup Every R package needs a DESCRIPTION file, so we start by specifying this information: usethis::create_package( path = &quot;.&quot;, fields = list( Package = params$package_name, Version = &quot;0.0.0.9000&quot;, Title = &quot;A Package That Does Least Squares&quot;, Description = &quot;This package does least squares.&quot;, `Authors@R` = person( given = &quot;Jacob&quot;, family = &quot;Bien&quot;, email = &quot;jbien@usc.edu&quot;, role = c(&quot;aut&quot;, &quot;cre&quot;) ) ) ) usethis::use_mit_license(copyright_holder = &quot;J. Bien&quot;) You can see that we‚Äôre using functions from the usethis package. Although it‚Äôs not required, it can be nice to add some package-level documentation. This is what will show up when someone types package?&lt;your-package-name&gt; in the console. #&#39; A Package That Does Least Squares #&#39; #&#39; This package does least squares. But what&#39;s actually interesting about it is that it was defined as a `bookdown` using the `litr` package. #&#39; #&#39; @docType package #&#39; @seealso `do_least_squares` "],["linear-regression.html", "3 Linear regression", " 3 Linear regression Suppose we have a response vector \\(y\\in\\mathbb R^n\\) and a data matrix \\(X\\in\\mathbb R^{n\\times p}\\). We want to find the solution to the problem \\[ \\min_{\\beta\\in\\mathbb R^p}\\|y-X\\beta\\|^2 \\] We‚Äôll assume that \\(X\\) is full rank with \\(n &gt; p\\). We know that the solution is given by \\[ \\hat\\beta=(X^TX)^{-1}X^Ty. \\] Our main function does exactly that! #&#39; Get the OLS solution #&#39; #&#39; @param y our response, which is an n-vector #&#39; @param X our data matrix, which is n by p #&#39; @export do_least_squares &lt;- function(y, X) { if(nrow(X) != length(y)) stop(&quot;The number of rows of X must match the length of y.&quot;) as.numeric(solve(crossprod(X), crossprod(X, y))) } Let me interject here to explain something about litr. Code chunks whose first line starts with #' are added to the package. So the above code chunk will end up in the params$package_name package whereas the next code chunk will not. Let‚Äôs see how this works! We start by simulating some data: ###&quot;simulate-data&quot;### set.seed(123) n &lt;- 100 p &lt;- 1 x &lt;- cbind(1, matrix(rnorm(n*p), n, p)) beta_star &lt;- c(2, 0.5) sigma &lt;- 0.1 y &lt;- x %*% beta_star + sigma * rnorm(n) Let‚Äôs call our function on this simulated data and make a plot: betahat &lt;- do_least_squares(y, x) We can see here a nice feature of litr: Anytime we refer to (or use) a function defined in the bookdown, it becomes a hyperlink that will take the reader to the function‚Äôs definition. plot(x[, 2], y) abline(betahat[1], betahat[2], col = 2, lwd=2) Ok, this looks good. But let‚Äôs see how our solution compares to lm‚Äôs answer. fit_lm &lt;- lm(y ~ x[, 2]) The coefficients from lm are the following: fit_lm$coefficients ## (Intercept) x[, 2] ## 1.9897197 0.4947528 We compare that to the coefficients from do_least_squares(): betahat ## [1] 1.9897197 0.4947528 Great. Let‚Äôs make an actual test out of this example and put it in our package. Rather than repeat ourselves with the simulation code, we will simply refer to the code chunk above. testthat::test_that(&quot;do_least_squares() works&quot;, { &lt;&lt;simulate-data&gt;&gt; fit_lm &lt;- lm(y ~ x[, 2]) # do lm and our function give the same coefficient vector? testthat::expect_equal(do_least_squares(y, x), as.numeric(fit_lm$coefficients)) # do we get the desired error when there is a length mismatch? testthat::expect_error(do_least_squares(y[-1], x), &quot;must match&quot;) }) ## Test passed üéä Code chunks that have one or more lines starting with test_that( (or testthat::test_that() are added to the package as tests. Since this test is now in our R package, it will be run (for example) when we run R CMD check on our package. "],["using-lsfit.html", "4 Using lsfit()", " 4 Using lsfit() Suppose we decide that we want to offer an alternative function in our package that calls lsfit() internally. #&#39; Get the OLS solution using `lsfit()` #&#39; #&#39; @param y our response, which is an n-vector #&#39; @param X our data matrix, which is n by p #&#39; @export do_least_squares_with_lsfit &lt;- function(y, X) { fit &lt;- stats::lsfit(x = X, y = y, intercept = FALSE) return(as.numeric(fit$coefficients)) } When we import a function from another package into our own, we use the double colon to refer to that function. We also include the following command, which will add the appropriate lines to the DESCRIPTION file: usethis::use_package(&quot;stats&quot;) ## ‚úî Adding &#39;stats&#39; to Imports field in DESCRIPTION ## ‚Ä¢ Refer to functions with `stats::fun()` Let‚Äôs see how this compares. (Note that the x and y are still in the environment.) betahat_lsfit &lt;- do_least_squares_with_lsfit(y, x) How do these compare? range(betahat_lsfit - betahat) ## [1] -4.996004e-16 -2.220446e-16 Ok great. "],["conclude.html", "5 Conclusion", " 5 Conclusion We are done defining our package. It remains to convert the Roxygen to documentation. rm(list = ls()) litr::document() # &lt;-- use instead of devtools::document() ## ‚Ñπ Updating frombookdown documentation ## ‚Ñπ Loading frombookdown ## Writing &#39;]8;;file:///Users/jacobbien/Dropbox/literate/Rpackage/frombookdown-project/frombookdown/NAMESPACENAMESPACE]8;;&#39; ## Writing &#39;]8;;ide:run:pkgload::dev_help(&#39;do_least_squares&#39;)do_least_squares.Rd]8;;&#39; ## Writing &#39;]8;;ide:run:pkgload::dev_help(&#39;do_least_squares_with_lsfit&#39;)do_least_squares_with_lsfit.Rd]8;;&#39; ## Writing &#39;]8;;ide:run:pkgload::dev_help(&#39;frombookdown-package&#39;)frombookdown-package.Rd]8;;&#39; We can also add some extra things to our package here, such as a README, some vignettes, a pkgdown site, etc. See here for an example of how to do this with litr. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
